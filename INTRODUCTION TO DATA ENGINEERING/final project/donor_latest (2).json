{"paragraphs":[{"text":"  \r\n  import org.apache.spark.sql.types._\r\n  import org.apache.spark.sql.{SQLContext, SparkSession}\r\n  import org.apache.spark.{SparkConf, SparkContext}\r\n  import org.apache.spark.storage.StorageLevel\r\n  import org.apache.spark.sql.functions.udf\r\n\r\n\r\n       /***This schema is used to define the datatype of the Resource.csv**/\r\n   val schema2 = StructType(Array(\r\n    StructField(\"Project_ID\", StringType, true) ,\r\n    StructField(\"Resource_Item_Name\", StringType, true),\r\n    StructField(\"Resource_Quantity\", StringType, true),\r\n    StructField(\"Resource_Unit_Price\", DoubleType, true),\r\n    StructField(\"Resource_Vendor_Name\", StringType, true)))\r\n\r\n  /***This schema is used to define the datatype of the Project.csv**/\r\n\r\n  val schema1 = StructType(Array(\r\n    StructField(\"Project_ID\", StringType, true) ,\r\n      StructField(\"School_ID\", StringType, true),\r\n      StructField(\"Teacher_ID\", StringType, true),\r\n      StructField(\"Teacher_Project_Posted_Sequence\", StringType, true),\r\n      StructField(\"Project_Type\", StringType, true),\r\n      StructField(\"Project_Title\", StringType, true),\r\n      StructField(\"Project_Essay\", StringType, true),\r\n      StructField(\"Project_Subject_Category_Tree\", StringType, true),\r\n      StructField(\"Project_Subject_Subcategory_Tree\", StringType, true),\r\n      StructField(\"Project_Grade_Level_Category\", StringType, true),\r\n      StructField(\"Project_Resource_Category\", StringType, true),\r\n      StructField(\"Project_Cost\", DoubleType, true),\r\n      StructField(\"Project_Posted_Date\", StringType, true),\r\n      StructField(\"Project_Expiration_Date\", StringType, true),\r\n      StructField(\"Project_Current_Status\", StringType, true),\r\n      StructField(\"Project_Fully_Funded_Date\", StringType, true))\r\n  )\r\n\r\n\r\n    val conf = new SparkConf()\r\n    conf.setMaster(\"local\")\r\n    conf.setAppName(\"sampletest\")\r\n    conf.set(\"spark.driver.host\", \"localhost\")\r\n   \r\n\r\n   val sparksession = SparkSession\r\n      .builder().master(\"local\")\r\n      .appName(\"sampletest\")\r\n      .config(\"spark.sql.warehouse.dir\", \"file:///C://test\").config(\"spark.sql.parquet.filterPushdown\", \"false\")\r\n      .getOrCreate()\r\n    import sparksession.implicits._\r\n    /*Create dataframe for Donors.csv*/\r\n    val donorsdf = sparksession.read.option(\"delimiter\", \",\").option(\"header\", \"true\").csv(\"hdfs:///tmp/Donors.csv\")\r\n      .toDF(\"Donor ID\", \"Donor City\", \"Donor State\", \"Donor is Teacher\", \"Donor Zip\")\r\n \r\n  /*Create dataframe for School.csv*/\r\n    val schooldf=sparksession.read.option(\"delimiter\", \",\").option(\"header\", \"true\").csv(\"hdfs:///tmp/Schools.csv\").na.drop\r\n      .toDF(\"School ID\",\"School Name\",\"School Metro Type\",\"School Percentage Free Lunch\",\"School State\",\"School Zip\",\"School City\",\"School County\",\"School District\")\r\n\r\n  /*Create dataframe for Donations.csv*/\r\n   val donationsdf = sparksession.read.option(\"delimiter\", \",\")\r\n    .option(\"header\", \"true\")\r\n    .csv(\"hdfs:///tmp/Donations.csv\")\r\n    .toDF(\"Project ID\", \"Donation ID\", \"Donor ID\", \"Donation Included Optional Donation\", \"Donation Amount\", \"Donor Cart Sequence\", \"Donation Received Date\")\r\n\r\n  /*Rename the headers of donorsdf with _ to avoid errors.(e.g Project ID to Project_ID*/\r\n   var newdonorsDf = donorsdf\r\n    for (col <- donorsdf.columns) {\r\n      newdonorsDf = newdonorsDf.withColumnRenamed(col, col.replaceAll(\"\\\\s\", \"_\"))\r\n    }\r\n/*Rename the headers of donationdf with _ to avoid errors.*/\r\n    var newdonationDf = donationsdf\r\n    for (col <- donationsdf.columns) {\r\n      newdonationDf = newdonationDf.withColumnRenamed(col, col.replaceAll(\"\\\\s\", \"_\"))\r\n     }\r\n /*Rename the headers of schooldf with _ to avoid errors*/\r\n    var newschooldf=schooldf\r\n     for(col<-schooldf.columns) {\r\n      newschooldf = newschooldf.withColumnRenamed(col, col.replaceAll(\"\\\\s\", \"_\"))\r\n    }\r\n /*Create a dataframe for Projects.csv*/   \r\n  val projectdf=sparksession.read.option(\"delimiter\", \",\").format(\"com.databricks.spark.csv\").option(\"mode\", \"DROPMALFORMED\").option(\"wholeFile\", true).option(\"multiline\",true).option(\"header\", true).option(\"inferSchema\", \"true\").option(\"ignoreLeadingWhiteSpace\",true).option(\"ignoreTrailingWhiteSpace\", true).schema(schema1).csv(\"hdfs:///tmp/projects/*.csv\").toDF\r\n \r\n /*Create a dataframe for Resources.csv*/\r\n val resourceDf=sparksession.read.option(\"delimiter\", \",\").format(\"com.databricks.spark.csv\").option(\"mode\", \"DROPMALFORMED\").option(\"wholeFile\", true).option(\"multiline\",true).option(\"inferSchema\",\"true\").option(\"escape\", \"\\\\\").option(\"header\", true).option(\"ignoreLeadingWhiteSpace\",true).option(\"ignoreTrailingWhiteSpace\", true).schema(schema2).csv(\"hdfs:///tmp/Resources.csv\").toDF\r\n \r\n\r\n newdonationDf.persist(StorageLevel.MEMORY_AND_DISK_2)     \r\n projectdf.persist(StorageLevel.MEMORY_AND_DISK_2)\r\n\r\n/**** Most requested Items*********/\r\n  val cnt_items=projectdf.groupBy(\"Project_Resource_Category\").agg(count(\"Project_ID\"))\r\n  .orderBy(org.apache.spark.sql.functions.col(\"count(Project_ID)\").desc )\r\n /*****Most expensive Items**********/ \r\n    val projectcost=projectdf.select($\"Project_Resource_Category\",$\"School_ID\",$\"Project_Cost\")\r\n      .groupBy($\"School_ID\",$\"Project_Resource_Category\").agg(max($\"Project_Cost\"))\r\n        .orderBy(org.apache.spark.sql.functions.col(\"max(Project_Cost)\").desc )\r\n /********create temp table for visualisation*********/       \r\ncnt_items.registerTempTable(\"cnt_items\")\r\n\r\n/*********create temp table for visualisation********/\r\nprojectcost.registerTempTable(\"projectcost\")\r\nresourceDf.persist(StorageLevel.MEMORY_AND_DISK_2)\r\nnewdonorsDf.persist(StorageLevel.MEMORY_AND_DISK_2)","user":"anonymous","dateUpdated":"2018-12-12T17:48:31+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":158,"optionOpen":false}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544151905349_302844517","id":"20181207-030505_1408975773","dateCreated":"2018-12-07T03:05:05+0000","dateStarted":"2018-12-12T17:48:33+0000","dateFinished":"2018-12-12T17:50:13+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:155"},{"text":"/************cities with maximum school****************/\r\n val cities=newschooldf.select($\"School_ID\", $\"School_City\",$\"School_Metro_Type\")\r\n      .groupBy($\"School_City\",$\"School_Metro_type\")\r\n      .agg(count(\"School_ID\"))\r\n      .orderBy(org.apache.spark.sql.functions.col(\"count(School_ID)\").desc).limit(50)\r\n\r\n/*********Create a temp table cities for visualisation****************/\r\ncities.registerTempTable(\"cities\")\r\n\r\n/******************average project cost per school type**************/\r\n  val avgcostperschool= projectdf.select($\"School_ID\",$\"Project_Cost\").groupBy($\"School_ID\").avg(\"Project_Cost\")\r\n \r\n  val avgcostschltype=avgcostperschool.join(newschooldf,avgcostperschool(\"School_ID\")===newschooldf(\"School_ID\"))\r\n    .select($\"School_Metro_Type\",$\"avg(Project_Cost)\")\r\n    .orderBy(org.apache.spark.sql.functions.col(\"avg(Project_Cost)\").desc).limit(50)\r\n \r\n /***************average project cost per grade level**************/\r\n\r\n    val avgprojectcost=projectdf.where($\"Project_Grade_Level_Category\"=!=\"unknown\").select($\"Project_Grade_Level_Category\",$\"Project_Cost\")\r\n      .groupBy($\"Project_Grade_Level_Category\").agg(avg($\"Project_Cost\"))\r\n      \r\n      /*********Create a temp table for visualisation****************/   \r\n  avgprojectcost.registerTempTable(\"avgprojectcost\")   \r\n  \r\n      \r\n/*********Create a temp table for visualisation****************/   \r\n  avgcostschltype.registerTempTable(\"avgcostschltype\")   \r\n  \r\n/*********State to receive the highest average Donations*************/\r\nval highest_avg=newdonationDf.groupBy($\"Donor_ID\").agg(avg($\"Donation_Amount\"))\r\n      .orderBy(org.apache.spark.sql.functions.col(\"avg(Donation_Amount)\").desc)\r\n\r\n   val state_max_value=highest_avg.join(newdonorsDf,highest_avg(\"Donor_ID\")===newdonorsDf(\"Donor_ID\"))\r\n     .select($\"Donor_state\",$\"avg(Donation_Amount)\")\r\n     .orderBy(org.apache.spark.sql.functions.col(\"avg(Donation_Amount)\").desc)\r\n     \r\n/*********Create a temp table for visualisation****************/   \r\nstate_max_value.registerTempTable(\"state_max_value\")\r\n\r\n/*********Grades with maximum expired projects****************/   \r\n   val gradeexpired= projectdf.where(projectdf(\"Project_Current_Status\")===\"Expired\").groupBy($\"Project_Grade_Level_Category\")\r\n  .agg(count($\"Project_ID\")).orderBy(org.apache.spark.sql.functions.col(\"count(Project_ID)\").desc)\r\n\r\n/*********Total expired vs live projects****************/   \r\n\r\n  val expiredlive=projectdf.where(projectdf(\"Project_Current_Status\")===\"Expired\" || projectdf(\"Project_Current_Status\")===\"Live\" )\r\n      .groupBy($\"Project_Current_Status\")\r\n      .agg(count($\"Project_ID\")) \r\n      .orderBy(org.apache.spark.sql.functions.col(\"count(Project_ID)\").desc)\r\n \r\n val live=projectdf.where(projectdf(\"Project_Current_Status\")===\"Live\")\r\n    .groupBy($\"Project_Current_Status\")\r\n    .agg(count($\"Project_ID\"))\r\n /*********Create a temp table for visualisation****************/     \r\n    expiredlive.registerTempTable(\"expiredlive\")\r\n    \r\n/***********Resource Vendor who has contributed to maximum projects****************/\r\nval resvendor=resourceDf.groupBy($\"Resource_Vendor_Name\").agg(count($\"Project_ID\"))\r\n   .orderBy(org.apache.spark.sql.functions.col(\"count(Project_ID)\").desc).limit(50).persist(StorageLevel.MEMORY_ONLY_2 )\r\n\r\n /*********Create a temp table for visualisation****************/     \r\n  \r\nresvendor.registerTempTable(\"resvendor\")\r\n","user":"anonymous","dateUpdated":"2018-12-12T17:48:33+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544162933735_1803220953","id":"20181207-060853_214829503","dateCreated":"2018-12-07T06:08:53+0000","dateStarted":"2018-12-12T17:48:40+0000","dateFinished":"2018-12-12T17:50:21+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:156"},{"text":"/*************Projects having Highest number of donors*************/\nval noofdonors=newdonationDf.select($\"Project_ID\",$\"Donor_ID\").groupBy($\"Project_ID\").agg(count($\"Donor_ID\"))\n   .orderBy(org.apache.spark.sql.functions.col(\"count(Donor_ID)\").desc)\n  val noofdonorsperproject=noofdonors.join(projectdf,noofdonors(\"Project_ID\")===projectdf(\"Project_ID\"))\n      .select($\"Project_Resource_Category\",noofdonors(\"Project_ID\"),$\"count(Donor_ID)\").\n      orderBy(org.apache.spark.sql.functions.col(\"count(Donor_ID)\").desc)\n \n /*********Create a temp table for visualisation****************/\n noofdonorsperproject.registerTempTable(\"noofdonorsperproject\")\n \n /**************Projects having Highest Total Amounts Funded**********************/\n \n    val highestamtfullyfunded=projectdf.select($\"Project_ID\",$\"Project_Resource_Category\",$\"Project_Cost\",$\"Project_Current_Status\")\n      .where(projectdf(\"Project_Current_Status\")===\"Fully Funded\")\n      .orderBy(org.apache.spark.sql.functions.col(\"Project_Cost\").desc).limit(100)\n \n /*********Create a temp table for visualisation****************/\n highestamtfullyfunded.registerTempTable(\"highestamtfullyfunded\")      \n \n /**********Projects having Highest Average Amounts Per Donor***********/\n \n val highestavgamt=newdonationDf.select($\"Project_ID\",$\"Donor_ID\",$\"Donation_Amount\").groupBy($\"Donor_ID\",$\"Project_ID\")\n      .agg(avg(\"Donation_Amount\"))\n      .orderBy(org.apache.spark.sql.functions.col(\"avg(Donation_Amount)\").desc)\n\n /*********Create a temp table for visualisation****************/\n highestavgamt.registerTempTable(\"highestavgamt\")","user":"anonymous","dateUpdated":"2018-12-12T17:48:39+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544208007373_1640234238","id":"20181207-184007_752667600","dateCreated":"2018-12-07T18:40:07+0000","dateStarted":"2018-12-12T17:50:14+0000","dateFinished":"2018-12-12T17:50:24+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:157"},{"text":" /*********which Project_resource_category do most states donate****************/\n val maxprojresperstate= projectdf.join(newschooldf,projectdf(\"School_ID\")===newschooldf(\"School_ID\"))\n    .select(projectdf(\"School_ID\"),$\"Project_Resource_Category\",$\"School_State\",$\"Project_Cost\")\n    \n val statevalue=maxprojresperstate.groupBy($\"School_State\",$\"Project_Resource_category\").agg(count($\"Project_Resource_Category\"))\n  .select($\"School_state\",$\"Project_Resource_category\",$\"count(Project_Resource_Category)\")\n      .orderBy(org.apache.spark.sql.functions.col(\"count(Project_Resource_Category)\").desc )\n      \n/*********Create a temp table for visualisation****************/\n statevalue.registerTempTable(\"statevalue\")\n \n  /*********For each project_resource_category max and min values for each state****************/\n  \n  val state=maxprojresperstate.select($\"School_State\").distinct()\n  val projrescat=maxprojresperstate.select($\"Project_Resource_Category\").distinct()\n   val maxminvalue=maxprojresperstate.groupBy($\"School_State\",$\"Project_Resource_Category\").agg(max($\"Project_Cost\"),min($\"Project_Cost\"))\n      .orderBy(org.apache.spark.sql.functions.col(\"School_state\"))\n \n/*********Create a temp table for visualisation****************/\n maxminvalue.registerTempTable(\"maxminvalue\")\n \n /*********Donation amount for each grade level category in top 5 states****************/\n \nval top5donors=newdonationDf.select($\"Donor_ID\",$\"Donation_Amount\",$\"Project_ID\").sort($\"Donation_Amount\".desc).limit(50)\n\nval top5states=top5donors.join(newdonorsDf, top5donors(\"Donor_ID\")===newdonorsDf(\"Donor_ID\"))\n     .select($\"Donor_City\",$\"Donor_State\",$\"Project_ID\",top5donors(\"Donation_Amount\"))\n\nval gradelevel=top5states.join(projectdf,top5states(\"Project_ID\")===projectdf(\"Project_ID\"))\n       .select($\"Project_Grade_Level_Category\",projectdf(\"Project_ID\"),$\"Donor_City\",$\"Donor_State\",$\"Donation_Amount\"  )\n /*********Create a temp table for visualisation****************/\ngradelevel.registerTempTable(\"gradelevel\")\n\n/**********the  time of year  we get max donations****************/\n  val split_date=newdonationDf.withColumn(\"tmp1\", split($\"Donation_Received_Date\",\"-\"))\n    .select($\"tmp1\".getItem(1).as(\"month\")).drop(\"tmp1\")\n  val cnt_months=split_date.groupBy(\"month\").count().sort($\"count\".desc)\n   /*********Create a temp table for visualisation****************/\ncnt_months.registerTempTable(\"cnt_months\")\n/*********Repeating Donors and who prefer to Donate to the same Category***********/\n val repeated_donors=newdonationDf.select($\"Project_ID\",$\"Donor_ID\").groupBy($\"Donor_ID\").count()\n        .orderBy(org.apache.spark.sql.functions.col(\"count\").desc ).where($\"count\">10)\n        val rep_project_id=repeated_donors.join(newdonationDf,repeated_donors(\"Donor_ID\")===newdonationDf(\"Donor_ID\"))\n          .select($\"Project_ID\",repeated_donors(\"Donor_ID\"))\nval res_category=rep_project_id.join(projectdf,rep_project_id(\"Project_ID\")===projectdf(\"Project_ID\"))\n      .select($\"Project_Resource_Category\",projectdf(\"Project_ID\"),$\"Donor_ID\")\n      .groupBy($\"Donor_ID\",$\"Project_Resource_Category\").count()\n     \n  /*********Create a temp table for visualisation****************/\nrepeated_donors.registerTempTable(\"repeated_donors\")\n res_category.registerTempTable(\"res_category\")    ","user":"anonymous","dateUpdated":"2018-12-12T17:48:40+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544208883690_225051916","id":"20181207-185443_23447405","dateCreated":"2018-12-07T18:54:43+0000","dateStarted":"2018-12-12T17:50:21+0000","dateFinished":"2018-12-12T17:50:31+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:158"},{"text":"/********************State wise population vs Donor Ratio*****************************/\n\n\nval population = spark.read.option(\"inferSchema\",\"true\")\n     .option(\"header\", \"true\")\n     .csv(\"hdfs:///tmp/statewise_population.csv\")\n     .toDF()\n\n    def typeCastToInt(s: String) = {\n      s.replace(\",\",\"\").toLong\n    }\nval typeCastToIntUdf = udf(typeCastToInt _)\nval population_new = population.select(\n      $\"State\",\n      $\"Population\",\n      ($\"Population\").alias(\"tempPop\"),\n      (typeCastToIntUdf($\"Population\")).alias(\"tempPop2\")\n    )\nval donors_per_state = newdonorsDf.groupBy(\"Donor_State\").count().orderBy(\"Donor_State\")\nval donors_per_state_population = donors_per_state.join(population_new, donors_per_state(\"Donor_State\") === population_new(\"State\"))\n      .select($\"Donor_State\", $\"count\", $\"tempPop2\")\nval result = donors_per_state_population.select(\n      $\"Donor_State\",\n      $\"count\",\n      $\"tempPop2\",\n      (($\"count\"/$\"tempPop2\")*100).alias(\"percentage\")\n    ).sort($\"percentage\".desc) \n  \n/***************create table for visualisation***********/\n\n result.registerTempTable(\"result\")    ","user":"anonymous","dateUpdated":"2018-12-12T17:48:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544420912684_-1427448243","id":"20181210-054832_951538363","dateCreated":"2018-12-10T05:48:32+0000","dateStarted":"2018-12-12T17:50:24+0000","dateFinished":"2018-12-12T17:50:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:159"},{"text":"val projsubcatcnt=projectdf.groupBy($\"Project_Subject_Category_Tree\").agg(count($\"Project_ID\")).orderBy(org.apache.spark.sql.functions.col(\"count(Project_ID)\").desc) \r\n\r\n /***************create table for visualisation***********/\r\n\r\n projsubcatcnt.registerTempTable(\"projsubcatcnt\") \r\n","user":"anonymous","dateUpdated":"2018-12-12T17:48:42+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544497075643_1152733877","id":"20181211-025755_100859949","dateCreated":"2018-12-11T02:57:55+0000","dateStarted":"2018-12-12T17:50:32+0000","dateFinished":"2018-12-12T17:50:40+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:160"},{"text":"%sql\nselect * from result","user":"anonymous","dateUpdated":"2018-12-12T17:48:42+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"stackedAreaChart":{},"multiBarChart":{"stacked":false},"scatterChart":{"xAxis":{"name":"Donor_State","index":0,"aggr":"sum"},"yAxis":{"name":"percentage","index":3,"aggr":"sum"},"group":{"name":"tempPop2","index":2,"aggr":"sum"}},"pieChart":{}},"keys":[{"name":"Donor_State","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"tempPop2","index":2,"aggr":"sum"},{"name":"percentage","index":3,"aggr":"sum"}],"commonSetting":{}},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544423904869_1458272488","id":"20181210-063824_135604541","dateCreated":"2018-12-10T06:38:24+0000","dateStarted":"2018-12-12T17:50:40+0000","dateFinished":"2018-12-12T17:51:26+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:161"},{"text":"%sql\nselect * from projsubcatcnt where Project_subject_Category_Tree in (\"Health & Sports\",\"Special Needs\",\"History & Civics\",\"Math & Science\",\"Music & The Arts\",\n\"Warmth, Care & Hunger\",\"Literacy & Language\")","user":"anonymous","dateUpdated":"2018-12-12T17:48:43+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":false}},"commonSetting":{},"keys":[{"name":"Project_Subject_Category_Tree","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count(Project_ID)","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544497580124_-435405603","id":"20181211-030620_2009341939","dateCreated":"2018-12-11T03:06:20+0000","dateStarted":"2018-12-12T17:50:41+0000","dateFinished":"2018-12-12T17:52:29+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:162"},{"text":"%sql\r\nselect * from cnt_items\r\n","user":"anonymous","dateUpdated":"2018-12-12T17:48:44+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544153357659_-1135833956","id":"20181207-032917_1678266909","dateCreated":"2018-12-07T03:29:17+0000","dateStarted":"2018-12-12T17:51:27+0000","dateFinished":"2018-12-12T17:52:32+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:163"},{"text":"%sql\nselect * from projectcost","user":"anonymous","dateUpdated":"2018-12-12T17:48:44+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"Project_Resource_Category","index":1,"aggr":"sum"}],"groups":[],"values":[{"name":"max(Project_Cost)","index":2,"aggr":"sum"},{"name":"School_ID","index":0,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544153353461_1522411519","id":"20181207-032913_802636853","dateCreated":"2018-12-07T03:29:13+0000","dateStarted":"2018-12-12T17:52:29+0000","dateFinished":"2018-12-12T17:52:40+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:164"},{"text":"%sql\nselect * from cities","user":"anonymous","dateUpdated":"2018-12-12T17:48:46+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":true},"stackedAreaChart":{"style":"stack"}},"commonSetting":{},"keys":[{"name":"School_City","index":0,"aggr":"sum"}],"groups":[{"name":"School_Metro_type","index":1,"aggr":"sum"}],"values":[{"name":"count(School_ID)","index":2,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544151928059_-1308453228","id":"20181207-030528_1109252463","dateCreated":"2018-12-07T03:05:28+0000","dateStarted":"2018-12-12T17:52:33+0000","dateFinished":"2018-12-12T17:52:46+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:165"},{"text":"%sql\nselect * from avgcostschltype\n","user":"anonymous","dateUpdated":"2018-12-12T17:48:46+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":false}},"commonSetting":{},"keys":[{"name":"School_Metro_Type","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"avg(Project_Cost)","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544163343692_666871916","id":"20181207-061543_277158053","dateCreated":"2018-12-07T06:15:43+0000","dateStarted":"2018-12-12T17:52:41+0000","dateFinished":"2018-12-12T17:52:53+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:166"},{"text":"%sql\nselect * from avgprojectcost\n","user":"anonymous","dateUpdated":"2018-12-12T17:48:47+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":false}},"commonSetting":{},"keys":[{"name":"Project_Grade_Level_Category","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"avg(Project_Cost)","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544306766044_1760635093","id":"20181208-220606_234889984","dateCreated":"2018-12-08T22:06:06+0000","dateStarted":"2018-12-12T17:52:47+0000","dateFinished":"2018-12-12T17:52:58+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:167"},{"text":"%sql\nselect * from state_max_value","user":"anonymous","dateUpdated":"2018-12-12T17:48:48+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":true},"stackedAreaChart":{"style":"stack"}},"commonSetting":{},"keys":[{"name":"Donor_state","index":0,"aggr":"sum"}],"groups":[{"name":"Donor_state","index":0,"aggr":"sum"}],"values":[{"name":"avg(Donation_Amount)","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544165297456_-342352929","id":"20181207-064817_876825086","dateCreated":"2018-12-07T06:48:17+0000","dateStarted":"2018-12-12T17:52:54+0000","dateFinished":"2018-12-12T17:55:19+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:168"},{"text":"%sql\nselect * from expiredlive\n","user":"anonymous","dateUpdated":"2018-12-12T17:48:49+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"pieChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":false},"lineChart":{"lineWithFocus":false,"forceY":false}},"commonSetting":{},"keys":[{"name":"Project_Current_Status","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count(Project_ID)","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544169931385_2080675218","id":"20181207-080531_1721307911","dateCreated":"2018-12-07T08:05:31+0000","dateStarted":"2018-12-12T17:52:59+0000","dateFinished":"2018-12-12T17:55:25+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:169"},{"text":"%sql\nselect * from resvendor","user":"anonymous","dateUpdated":"2018-12-12T17:48:49+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544171906667_216168892","id":"20181207-083826_379016203","dateCreated":"2018-12-07T08:38:26+0000","dateStarted":"2018-12-12T17:55:20+0000","dateFinished":"2018-12-12T17:55:40+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:170"},{"text":"%sql\nselect * from noofdonorsperproject\n\n","user":"anonymous","dateUpdated":"2018-12-12T17:48:50+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544172421949_-261753827","id":"20181207-084701_2112840436","dateCreated":"2018-12-07T08:47:01+0000","dateStarted":"2018-12-12T17:55:26+0000","dateFinished":"2018-12-12T17:56:07+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:171"},{"text":"%sql\nselect * from highestamtfullyfunded","user":"anonymous","dateUpdated":"2018-12-12T17:48:51+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"Project_Resource_Category","index":1,"aggr":"sum"}],"groups":[],"values":[{"name":"Project_Cost","index":2,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544208698864_-1633714349","id":"20181207-185138_1028068478","dateCreated":"2018-12-07T18:51:38+0000","dateStarted":"2018-12-12T17:55:40+0000","dateFinished":"2018-12-12T17:56:09+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:172"},{"text":"%sql\nselect * from highestavgamt","user":"anonymous","dateUpdated":"2018-12-12T17:48:52+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"Project_ID","index":1,"aggr":"sum"}],"groups":[{"name":"Donor_ID","index":0,"aggr":"sum"}],"values":[{"name":"avg(Donation_Amount)","index":2,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544208752212_1062113925","id":"20181207-185232_1401255318","dateCreated":"2018-12-07T18:52:32+0000","dateStarted":"2018-12-12T17:56:08+0000","dateFinished":"2018-12-12T17:56:36+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:173"},{"text":"%sql\nselect * from statevalue","user":"anonymous","dateUpdated":"2018-12-12T17:48:52+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":true},"stackedAreaChart":{}},"commonSetting":{},"keys":[{"name":"School_state","index":0,"aggr":"sum"}],"groups":[{"name":"Project_Resource_category","index":1,"aggr":"sum"}],"values":[{"name":"count(Project_Resource_Category)","index":2,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544208789075_-56907732","id":"20181207-185309_1995848792","dateCreated":"2018-12-07T18:53:09+0000","dateStarted":"2018-12-12T17:56:09+0000","dateFinished":"2018-12-12T17:56:43+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:174"},{"text":"%sql\nselect * from maxminvalue","user":"anonymous","dateUpdated":"2018-12-12T17:48:53+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"scatterChart":{"xAxis":{"name":"School_State","index":0,"aggr":"sum"},"yAxis":{"name":"min(Project_Cost)","index":3,"aggr":"sum"},"group":{"name":"max(Project_Cost)","index":2,"aggr":"sum"}},"multiBarChart":{"stacked":true}},"commonSetting":{},"keys":[{"name":"School_State","index":0,"aggr":"sum"}],"groups":[{"name":"Project_Resource_Category","index":1,"aggr":"sum"}],"values":[{"name":"max(Project_Cost)","index":2,"aggr":"sum"},{"name":"min(Project_Cost)","index":3,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544227394198_-1908462143","id":"20181208-000314_1784524637","dateCreated":"2018-12-08T00:03:14+0000","dateStarted":"2018-12-12T17:56:36+0000","dateFinished":"2018-12-12T17:56:49+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:175"},{"text":"%sql\nselect * from gradelevel","user":"anonymous","dateUpdated":"2018-12-12T17:48:53+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":false},"stackedAreaChart":{"style":"stack"}},"commonSetting":{},"keys":[{"name":"Project_Grade_Level_Category","index":0,"aggr":"sum"}],"groups":[{"name":"Donor_State","index":3,"aggr":"sum"}],"values":[{"name":"Donation_Amount","index":4,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544227415203_-269385856","id":"20181208-000335_386782051","dateCreated":"2018-12-08T00:03:35+0000","dateStarted":"2018-12-12T17:56:43+0000","dateFinished":"2018-12-12T17:57:01+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:176"},{"text":"%sql\nselect * from cnt_months","user":"anonymous","dateUpdated":"2018-12-12T17:48:54+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544237354754_-882306251","id":"20181208-024914_354588624","dateCreated":"2018-12-08T02:49:14+0000","dateStarted":"2018-12-12T17:56:50+0000","dateFinished":"2018-12-12T17:57:11+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:177"},{"text":"%sql\nselect * from repeated_donors","user":"anonymous","dateUpdated":"2018-12-12T17:48:54+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"Donor_ID","index":0,"aggr":"sum"}],"groups":[{"name":"count","index":1,"aggr":"sum"}],"values":[{"name":"count","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544241852249_-405967453","id":"20181208-040412_178482246","dateCreated":"2018-12-08T04:04:12+0000","dateStarted":"2018-12-12T17:57:02+0000","dateFinished":"2018-12-12T17:57:26+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:178"},{"text":"%sql\nselect * from res_category","user":"anonymous","dateUpdated":"2018-12-12T17:48:55+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":true}},"commonSetting":{},"keys":[{"name":"Project_Resource_Category","index":1,"aggr":"sum"}],"groups":[],"values":[{"name":"count","index":2,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544321157839_910164438","id":"20181209-020557_377735795","dateCreated":"2018-12-09T02:05:57+0000","dateStarted":"2018-12-12T17:57:12+0000","dateFinished":"2018-12-12T17:58:58+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:179"},{"text":"val essays = projectdf.select(\"Project_Essay\")\r\nval wordsDf = essays\r\n      .filter(row => row(0) != null)\r\n      .flatMap(row => row(0).toString.toLowerCase().split(\"\\\\W+\"))\r\n      .select($\"value\".alias(\"word\"))\r\n    wordsDf.persist(StorageLevel.MEMORY_AND_DISK_2)\r\n    essays.persist(StorageLevel.MEMORY_AND_DISK_2)\r\nval stopWords = Seq(\"a\",\"able\",\"about\",\"across\",\"after\",\"all\",\"almost\",\"also\",\"am\",\"among\",\"an\",\"and\",\"any\",\"are\",\"as\",\"at\",\"be\",\"because\",\"been\",\"but\",\"by\",\"can\",\"cannot\",\"could\",\"dear\",\"did\",\"do\",\"does\",\"either\",\"else\",\"ever\",\"every\",\"for\",\"from\",\"get\",\"got\",\"had\",\"has\",\"have\",\"he\",\"her\",\"hers\",\"him\",\"his\",\"how\",\"however\",\"i\",\"if\",\"in\",\"into\",\"is\",\"it\",\"its\",\"just\",\"least\",\"let\",\"like\",\"likely\",\"may\",\"me\",\"might\",\"most\",\"must\",\"my\",\"neither\",\"no\",\"nor\",\"not\",\"of\",\"off\",\"often\",\"on\",\"only\",\"or\",\"other\",\"our\",\"own\",\"rather\",\"said\",\"say\",\"says\",\"she\",\"should\",\"since\",\"so\",\"some\",\"than\",\"that\",\"the\",\"their\",\"them\",\"then\",\"there\",\"these\",\"they\",\"this\",\"tis\",\"to\",\"too\",\"twas\",\"us\",\"wants\",\"was\",\"we\",\"were\",\"what\",\"when\",\"where\",\"which\",\"while\",\"who\",\"whom\",\"why\",\"will\",\"with\",\"would\",\"yet\",\"you\",\"your\",\"donotremoveessaydivider\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"t\",\"12\",\"k\",\r\n      \"s\",\"know\",\"being\",\"through\",\"more\",\"make\",\"new\",\"help\",\"learn\",\"learning\",\"love\",\"class\",\"kids\",\"level\",\"time\",\"up\",\"come\",\"use\",\"more\",\"need\",\"many\",\"each\",\"want\",\"very\",\"day\",\"one\",\"year\",\"student\",\"students\",\"children\",\"school\",\"classroom\",\"having\",\"way\",\"allow\",\"high\",\"using\",\"access\",\"provide\",\"first\",\"give\",\"teach\",\"given\",\"well\",\"see\",\"become\",\"life\",\"important\",\"out\",\"different\",\"group\",\"work\",\"grade\",\"world\",\"read\",\"fun\",\"materials\",\"create\")\r\n\r\nval wordsDf_clean = wordsDf\r\n      .filter(w => !stopWords.contains(w(0).toString()))      \r\n      \r\nval wordsDf_clean_count = wordsDf_clean\r\n        .groupBy($\"word\")\r\n        .count()\r\n        .select($\"word\", $\"count\")\r\n        .orderBy($\"count\".desc)\r\nwordsDf_clean_count.persist(StorageLevel.MEMORY_AND_DISK_2)\r\n\r\n/************create temporary table for visualisation**************/\r\n wordsDf_clean_count.registerTempTable(\"wordsDf_clean_count\")","user":"anonymous","dateUpdated":"2018-12-12T17:48:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544429270376_1022288741","id":"20181210-080750_1389212212","dateCreated":"2018-12-10T08:07:50+0000","dateStarted":"2018-12-12T17:57:26+0000","dateFinished":"2018-12-12T18:06:45+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:180"},{"text":"%sql\nselect * from wordsDf_clean_count where word in (\"science\",\"maths\",\"technology\",\"ipad\",\"computer\",\"laptop\",\"supplies\",\"kindergarten\",\"trip\",\"books\",\"club\")","user":"anonymous","dateUpdated":"2018-12-12T17:48:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544429301368_222441750","id":"20181210-080821_1356550575","dateCreated":"2018-12-10T08:08:21+0000","dateStarted":"2018-12-12T17:58:59+0000","dateFinished":"2018-12-12T18:06:57+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:181"},{"text":"wordsDf_clean_count.unpersist\r\nresourceDf.unpersist\r\nnewdonorsDf.unpersist\r\nprojectdf.unpersist\r\nnewdonationDf.unpersist\r\nwordsDf.unpersist\r\nessays.unpersist","user":"anonymous","dateUpdated":"2018-12-12T17:48:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544321186007_716867248","id":"20181209-020626_1149346560","dateCreated":"2018-12-09T02:06:26+0000","dateStarted":"2018-12-12T18:06:46+0000","dateFinished":"2018-12-12T18:06:58+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:182"},{"user":"anonymous","dateUpdated":"2018-12-12T17:48:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544429406284_573887706","id":"20181210-081006_1889670540","dateCreated":"2018-12-10T08:10:06+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:183"}],"name":"donor_latest","id":"2DWVC55NB","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}